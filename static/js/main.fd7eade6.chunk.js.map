{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["require","App","useState","blob","setBlob","a","uploadToAnonymousFilesAsync","uri","console","log","isOnInitially","onRecordingComplete","videoBlob","onClick","document","querySelector","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qjBAAe,I,qDCQEA,EAAQ,KAsGVC,MAhGf,WACE,MAAuBC,mBAAS,GAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KADa,4CAsDX,4BAAAC,EAAA,yDAIW,MAANF,EAJL,gCAKoBG,YAA4BH,GALhD,OAKQI,EALR,OAMMC,QAAQC,IAAI,MAAMF,GANxB,4CAtDW,sBAoEb,OAGI,gCACC,cAAC,IAAD,CACCG,eAAa,EACbC,oBAAqB,SAAAC,GAEnBJ,QAAQC,IAAI,YAAaG,GACzBR,EAAQQ,MAKZ,wBAAQC,QAAS,kBAAKC,SAASC,cAAc,WAAWC,SAAxD,mBACD,wBAAQH,QAnFE,2CAmFV,wBCrFUI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,M","file":"static/js/main.fd7eade6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import uploadToAnonymousFilesAsync from 'anonymous-files';\nimport { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Context, SnakeGame } from \"react-game-snake\";\nimport { Button } from 'bootstrap';\nimport Countdown from 'react-countdown';\nimport VideoRecorder from 'react-video-recorder'\nconst anonfile = require('anonfile-lib')\n\n\n\n\n\nfunction App() {\n  const [blob,setBlob] = useState(0)\n\n  function simulateKey (keyCode, type, modifiers) {\n    var evtName = (typeof(type) === \"string\") ? \"key\" + type : \"keydown\";\t\n    var modifier = (typeof(modifiers) === \"object\") ? modifier : {};\n  \n    var event = document.createEvent(\"HTMLEvents\");\n    event.initEvent(evtName, true, false);\n    event.keyCode = keyCode;\n  \n  \n    document.dispatchEvent(event);\n  }\n  function goUp(){\n    \n    simulateKey(38)\n\n  }\n  function goDown(){\n    simulateKey(40)\n    console.log(\"DOWN\")\n\n  }\n  function goLeft(){\n    simulateKey(37)\n    console.log(\"LEFT\")\n\n  }\n  function goRight(){\n    simulateKey(39)\n    console.log(\"RIGHT\")\n  }\n\n\n\n  const Completionist = () => <span>You are good to go!</span>;\n\n    // Renderer callback with condition\n    const renderer = ({ hours, minutes, seconds, completed }) => {\n      if (completed) {\n        // Render a completed state\n        return <Completionist />;\n      } else {\n        // Render a countdown\n        return <span>{hours}:{minutes}:{seconds}</span>;\n      }\n    };\n    function startRec(){\n      \n        document.querySelector('.cWQnoM').click()\n      \n        \n    }\n    async function uploadFile(){\n      // anonfile.upload('anonymous-files./logo.svg').then((info)=>{\n      //     console.log(\"INFO\",info)\n      // })\n      if(blob!=null){\n        let uri = await uploadToAnonymousFilesAsync(blob);\n          console.log(\"URI\",uri)\n      }\n      \n\n    }\n     async function check(){\n      \n    }\n  return (\n    \n      \n      <div>\n       <VideoRecorder\n        isOnInitially \n        onRecordingComplete={videoBlob => {\n          // Do something with the video...\n          console.log('videoBlob', videoBlob)\n          setBlob(videoBlob)\n        }}\n      >\n        \n      </VideoRecorder> \n      <button onClick={()=> document.querySelector('.cWQnoM').click()} >START</button> \n     <button onClick={uploadFile} >UPLOAD</button>\n     \n     \n    \n      </div>\n      \n\n\n    \n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}